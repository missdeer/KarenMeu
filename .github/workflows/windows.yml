name: Windows
on: 
  push:
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - '.github/workflows/macos.yml'
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - '.github/workflows/macos.yml'
jobs:
  build:
    name: Build
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - qt_arch: win64_msvc2019_64
            msvc_arch: x64
            qt_arch_install: msvc2019_64
            mingw_arch: MINGW64 
            mingw_prefix: mingw-w64-x86_64
            toolchains: gcc
            GOARCH: amd64
            BUILDRP: build-x64.bat
          - qt_arch: win32_msvc2019
            msvc_arch: x86
            qt_arch_install: msvc2019_32
            mingw_arch: MINGW32
            mingw_prefix: mingw-w64-i686
            toolchains: gcc
            GOARCH: 386
            BUILDRP: build-x86.bat
    env:
      targetName: KarenMeu
      go_version: 1.15.3
      qt_ver: 5.15.1
      qt_target: desktop
    # 步骤
    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ env.qt_ver }}
          target: ${{ env.qt_target }}
          arch: ${{ matrix.qt_arch }}
          modules: qtwebengine
          
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: ${{ matrix.mingw_arch }}
          install: zip make git ${{ matrix.mingw_prefix }}-${{ matrix.toolchains }} ${{ matrix.mingw_prefix }}-make ${{ matrix.mingw_prefix }}-zstd

      - name: Set up Go 1.15
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.go_version }}
        id: go

      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          ref: ${{ github.head_ref }}
          submodules: true
       
      - name: generate scintilla headers
        shell: cmd
        run: |
          cd 3rdparty\scintilla\qt\ScintillaEdit
          python WidgetGen.py
          dir
          cd ..\..\..\..

      - name: Build Go executables
        shell: cmd
        env:
          vc_arch: ${{ matrix.msvc_arch }}
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%
          set PATH=D:\a\_temp\msys\msys64\${{ matrix.mingw_arch }}\bin;%PATH%
          set GOARCH=${{ matrix.GOARCH }}
          set GOOS=windows
          set CGO_ENABLED=1
          cd renderer
          go env
          go build -v -buildmode=c-archive  -ldflags="-s -w" -o renderer.a 
          dir
          cd ..

      - name: update cgo headers
        shell: msys2 {0}
        run: |
          cd renderer
          ./update-def.sh
          dir
          cd ..

      - name: Generate import lib
        shell: cmd
        env:
          vc_arch: ${{ matrix.msvc_arch }}
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%
          cd renderer
          set PATH=D:\a\_temp\msys\msys64\${{ matrix.mingw_arch }}\bin;%PATH%
          gcc renderer.def renderer.a -shared -lwinmm -lWs2_32 -o renderer.dll -Wl,--out-implib,renderer.dll.a
          lib /def:renderer.def /name:renderer.dll /out:renderer.lib /MACHINE:${{ matrix.msvc_arch }}
          dir
          cd ..

      - name: build-msvc
        shell: cmd
        env:
          vc_arch: ${{ matrix.msvc_arch }}
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%
          mkdir build
          cd build
          qmake -r CONFIG+=release CONFIG+=qtquickcompiler ..\${{ env.targetName }}.pro
          nmake
          cd ..

      - name: package
        shell: cmd
        run: |
          mkdir ${{ env.targetName }}-${{ matrix.qt_arch }}
          copy build\Release\${env:targetName}'.exe' ${{ env.targetName }}-${{ matrix.qt_arch }}\
          copy renderer\renderer.dll ${{ env.targetName }}-${{ matrix.qt_arch }}\
          windeployqt ${{ env.targetName }}-${{ matrix.qt_arch }}\${{ env.targetName }}'.exe'

      - name: upload artifact
        uses: actions/upload-artifact@v1
        with:
          path: ${{ env.targetName }}-${{ matrix.qt_arch }}
          name: ${{ env.targetName }}-${{ matrix.qt_arch }}